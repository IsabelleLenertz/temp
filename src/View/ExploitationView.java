package View;

import Control.GameControleur;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;

/**
 * Exploitation part's view
 */
public class ExploitationView extends StageView {

    /**
     * Default constructor
     */
    public ExploitationView(GameControleur g)
    {
        super(g);

        // generating the selectable tool panels
        // TODO test once the scenario is implemented in the model
        selectableExploitationTools = new ArrayList<SelectableExploitationToolPanel>();
        for (String toolName : g.getExploitationToolsList()) {
            SelectableExploitationToolPanel toolPan = new SelectableExploitationToolPanel(toolName, g);
            selectableExploitationTools.add(toolPan);
            tools.add(toolPan);
        }
    }

    @Override
    public void update() {
        super.update();
        // TODO test once the scenario is implemented in the model
        // updating each selectable tool panel
        for (SelectableExploitationToolPanel toolPan : selectableExploitationTools) {
            toolPan.update();
        }
    }

    private ArrayList<SelectableExploitationToolPanel> selectableExploitationTools;

    private JPanel resource;

    private JPanel relics;

    private JPanel tools;

    private JPanel panelTextButton;

    private JLabel text;

    private JButton toMainMenu;

    private JButton confirm;

    private GridBagConstraints gc;

    @Override
    public void setDisplay()
    {
        this.setLayout(new GridBagLayout());

        gc = new GridBagConstraints();
        this.setBackground(Color.ORANGE);
        gc.anchor = GridBagConstraints.FIRST_LINE_START;
        gc.fill = GridBagConstraints.VERTICAL;

        setResource();
        this.add(resource, gc);
        setRelics();
        this.add(relics, gc);
        setTools();
        this.add(tools, gc);
        this.add(setSideInfos(), gc);
        setPanelTextButton();
        this.add(panelTextButton, gc);
        setConfirm();
        this.add(confirm, gc);

        this.setVisible(true);
    }

    @Override
    protected void setResource()
    {
        resource = new JPanel();
        resource.setName("RSS");
        resource.setBackground(Color.RED);
        resource.setVisible(true);

        gc.gridx = 0;
        gc.gridy = 0;
        gc.weightx = 0.2;
        gc.weighty = 0.9;
        gc.fill = GridBagConstraints.BOTH;
    }

    protected void setRelics()
    {
        relics = new JPanel();
        relics.setName("relics");
        relics.setBackground(Color.GRAY);
        relics.setVisible(true);

        gc.gridx = 1;
        gc.gridy = 0;
        gc.weightx = 0.2;
        gc.weighty = 0.9;
        gc.fill = GridBagConstraints.BOTH;

        setFoundRelics();
    }

    @Override
    protected void setTools()
    {
        tools = new JPanel();
        tools.setName("Char");
        tools.setBackground(Color.BLUE);
        tools.setVisible(true);
        tools.setPreferredSize(tools.getSize());

        gc.gridx = 2;
        gc.gridy = 0;
        gc.weightx = 0.75;
        gc.fill = GridBagConstraints.BOTH;
        tools.setLayout(new BoxLayout(tools, BoxLayout.Y_AXIS));

    }

    @Override
    protected JPanel setSideInfos()
    {
        JPanel sideInfos = super.setSideInfos();

        gc.gridx = 3;
        gc.gridy = 0;
        gc.weightx = 0.15;
        gc.fill = GridBagConstraints.BOTH;
        return sideInfos;
    }

    @Override
    protected  void setPanelTextButton()
    {
        panelTextButton = new JPanel();
        panelTextButton.setLayout(new GridBagLayout());
        panelTextButton.setBackground(Color.BLACK);
        panelTextButton.setVisible(true);

        setText();
        panelTextButton.add(text, gc);
        setToMainMenu();
        panelTextButton.add(toMainMenu, gc);

        gc.gridx = 0;
        gc.gridy = 1;
        gc.gridwidth = 3;
        gc.weighty = 0.1;
        gc.fill = GridBagConstraints.BOTH;
    }

    @Override
    protected void setText()
    {
        text = new JLabel("text");
        text.setBackground(Color.CYAN);
        text.setOpaque(true);
        text.setVisible(true);

        gc.gridx = 0;
        gc.gridy = 0;
        gc.weightx = 0.8;
        gc.fill = GridBagConstraints.BOTH;
    }

    @Override
    public void setToMainMenu()
    {
        toMainMenu = new JButton("Main Menu");
        toMainMenu.setBackground(Color.PINK);
        toMainMenu.setVisible(true);
        toMainMenu.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                getG().backToMainMenu();
            }
        });

        gc.gridx = 1;
        gc.gridy = 0;
        gc.weightx = 0.2;
        gc.fill = GridBagConstraints.BOTH;
    }

    @Override
    protected void setConfirm()
    {
        confirm = new JButton("confirm");
        confirm.setBackground(Color.PINK);
        confirm.setVisible(true);
        confirm.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                getG().nextStage();
            }
        });

        gc.gridx = 3;
        gc.gridy = 1;
        gc.fill = GridBagConstraints.BOTH;
    }

    public void setResourceRestantes()
    {
        resource.removeAll();

        ArrayList<String> jobsList = this.getG().getAvailableJobs();
        while (jobsList.size() != 0) {
            String job = jobsList.get(0);
            int count = 0;
            for (int i = jobsList.size()-1; i >= 0; i--) {
                if (jobsList.get(i) == job) {
                    count++;
                    jobsList.remove(i);
                }
            }
            resource.add(new JLabel(job + " x" + count));
        }

        resource.revalidate();
    }

    public void setFoundRelics()
    {
        relics.add(new JLabel("Reliques trouv√©es : "));

        ArrayList<String> relicsList = this.getG().getFoundRelicsList();
        for(String relique : relicsList)
        {
            relics.add(new JLabel(relique));
        }
    }

}